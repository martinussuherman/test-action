# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
    - master
    - test
    - another

  release:
    types: 
    - published
    - edited

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Get image id and version
      run: |
        IMG_NAME=${{ github.repository }}
        IMG_NAME=$(echo $IMG_NAME | sed -e 's!${{ github.repository_owner }}/!!')
        
        IMG_ID=docker.pkg.github.com/${{ github.repository }}/$IMG_NAME
          
        # Change all uppercase to lowercase
        IMG_ID=$(echo $IMG_ID | tr '[A-Z]' '[a-z]')

        IMG_URL=https://$IMG_ID

        # Strip git ref prefix from version
        IMG_VER=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && IMG_VER=$(echo $IMG_VER | sed -e 's/^v//')

        # Use Docker `latest` tag convention
        [ "$IMG_VER" == "master" ] && IMG_VER=latest

        echo "::set-env name=IMAGE_ID::$IMG_ID"
        echo "::set-env name=IMAGE_VERSION::$IMG_VER"
        echo "::set-env name=IMAGE_URL::$IMG_URL"
        echo "::set-env name=IMAGE_NAME::$IMG_NAME"

    # Runs a set of commands using the runners shell
    - name: Run a multi-line script
      run: |
        echo Ref="${{ github.ref }}"
        echo Workspace="${{ github.workspace }}"
        echo LABEL_MAINTAINER=$(curl -s https://api.github.com/users/${{github.repository_owner}} | grep '"name"' | sed -e 's!  "name": !!; s!"!!g; s!,!!g;')
        echo LABEL_BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"`
        echo LABEL_DESCRIPTION=$(curl -s https://api.github.com/repos/${{github.repository}} | grep '"description"' -m 1 | sed -e 's!  "description": !!; s!"!!g; s!,!!g;')
        echo LABEL_LICENSE=$(curl -s https://api.github.com/repos/${{github.repository}} | grep '"spdx_id"' -m 1 | sed -e 's!    "spdx_id": !!; s!"!!g; s!,!!g;')
        echo LABEL_NAME=${{ github.repository }}
        echo LABEL_URL=${{ env.IMAGE_URL }}
        echo LABEL_VCS_REF=`git rev-parse --short ${{ github.sha }}` 
        echo LABEL_VCS_URL=`git config --get remote.origin.url` 
        echo LABEL_VENDOR=${{ github.repository_owner }}
        echo LABEL_VERSION=${{ env.IMAGE_VERSION }}

    - name: Display variables
      run: |
        echo IMAGE_ID=${{ env.IMAGE_ID }}
        echo IMAGE_NAME=${{ env.IMAGE_NAME }}
        echo tag=${{ env.IMAGE_NAME }} ${{ env.IMAGE_ID }}:${{ env.IMAGE_VERSION }}
        
    - name: Try go module
      run: |
        env | grep GO
        GO111MODULE=on
        go get github.com/mvdan/sh/cmd/shfmt/
        go get github.com/goreleaser/nfpm/cmd/nfpm
        pwd
        ls -al $GOROOT/bin
#        $GOROOT/bin/shfmt -h
        
